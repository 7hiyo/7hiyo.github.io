<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 多分辨率适配 | Z5LINK创赢未来]]></title>
  <link href="http://7hiyo.github.io/blog/categories/duo-fen-bian-lu-gua-pei/atom.xml" rel="self"/>
  <link href="http://7hiyo.github.io/"/>
  <updated>2014-04-22T17:17:06+08:00</updated>
  <id>http://7hiyo.github.io/</id>
  <author>
    <name><![CDATA[Z5LINK.Inc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android的多分辨率适配]]></title>
    <link href="http://7hiyo.github.io/blog/2014/04/15/ios-cocoapods/"/>
    <updated>2014-04-15T14:23:11+08:00</updated>
    <id>http://7hiyo.github.io/blog/2014/04/15/ios-cocoapods</id>
    <content type="html"><![CDATA[<h2>android的分辨率适配</h2>

<hr />

<p>Android手机目前常见的分辨率</p>

<ol>
<li>手机常见分辨率:
4:3

<blockquote><ul>
<li>VGA   640*480 (Video Graphics Array)</li>
<li>QVGA  320*240 (Quarter VGA)</li>
<li>HVGA  480*320 (Half-size VGA)</li>
<li>SVGA  800*600 (Super VGA)</li>
</ul>
</blockquote></li>
</ol>


<!--more-->


<p></p>

<pre><code>5:3
</code></pre>

<blockquote><ul>
<li>WVGA  800*480 (Wide VGA)</li>
</ul>
</blockquote>

<pre><code>16:9
</code></pre>

<blockquote><ul>
<li>FWVGA 854*480 (Full Wide VGA)</li>
<li>HD        1920*1080 High Definition</li>
<li>QHD     960*540</li>
<li>720p    1280*720  标清</li>
<li>1080p  1920*1080 高清</li>
</ul>
</blockquote>

<pre><code>手机:
</code></pre>

<blockquote><ul>
<li>iphone 4/4s    960*640 (3:2)</li>
<li>iphone5         1136*640</li>
<li>小米1             854*480(FWVGA)</li>
<li>小米2             1280*720</li>
</ul>
</blockquote>

<ol>
<li>分辨率对应DPI</li>
</ol>


<blockquote><ul>
<li>&ldquo;HVGA    mdpi&rdquo;</li>
<li>&ldquo;WVGA   hdpi &rdquo;</li>
<li>&ldquo;FWVGA hdpi &rdquo;</li>
<li>&ldquo;QHD      hdpi &rdquo;</li>
<li>&ldquo;720P     xhdpi&rdquo;</li>
<li>&ldquo;1080P   xxhdpi “</li>
</ul>
</blockquote>

<hr />

<h2>屏幕适配的注意事项</h2>

<p> <strong>基本设置</strong></p>

<ul>
<li><p>AndroidManifest.xml设置
   在中Menifest中添加子元素 android:anyDensity=“true"时，应用程序安装在不同密度的终端上时，程序会分别加载xxhdpi、xhdpi、hdpi、mdpi、ldpi文件夹中的资源；相反，如果设为false，即使在文件夹下拥有相同资源，应用不会自动地去相应文件夹下寻找资源：</p>

<pre><code>   1) 如果drawable-hdpi、drawable-mdpi、drawable-ldpi三个文件夹中有同一张图片资源的不同密度表示，那么系统会去加载drawable_mdpi文件夹中的资源；
   2) 如果drawable-hpdi中有高密度图片，其它两个文件夹中没有对应图片资源，那么系统会去加载drawable-hdpi中的资源，其他同理；
   3) 如果drawable-hdpi,drawable-mdpi中有图片资源，drawable-ldpi中没有，系统会加载drawable-mdpi中的资源，其他同理，使用最接近的密度级别。
</code></pre></li>
<li><p>横屏竖屏目录区分
   1) drawable</p>

<pre><code> a) drawable-hdpi该图片即适用于横屏，也适用于竖屏；
 b) drawable-land-hdpi,当屏幕为横屏，且为高密度时，加载此文件夹的资源；
 c) drawable-port-hdpi,当屏幕为竖屏，且为高密度时，加载此文件夹中的资源。其他同理。
</code></pre></li>
</ul>


<p>  2) layout</p>

<pre><code>      在res目录下建立layout-port和layout-land两个目录，里面分别放置竖屏和横屏两种布局文件，以适应对横屏竖屏自动切换。
</code></pre>

<hr />

<h2>多屏幕适配的4条黄金原则</h2>

<blockquote><p>1) 在layout文件中设置控件尺寸时应采用fill_parent、wrap_content、match_parent和dp；</p>

<pre><code> 具体来说，设置view的属性android:layout_width和android:layout_height的值时，wrap_content，match_parent或dp比px更好，文字大小应该使用sp来定义。
</code></pre>

<p>2) 在程序的代码中不要出现具体的像素值，在dimens.xml中定义；</p>

<pre><code> 为了使代码简单，android内部使用pix为单位表示控件的尺寸，但这是基于当前屏幕基础上的。为了适应多种屏幕，android建议开发者不要使用具体的像素来表示控件尺寸。
</code></pre>

<p>3) 不使用AbsoluteLayout(android1.5已废弃) ，可以使用RelativeLayout替代；</p>

<p>4) 对不同的屏幕提供合适大小的图片。
   不同大小屏幕用不同大小的图片，low:medium:high:extra-high图片大小的比例为3:4:6:8；举例来说，对于中等密度(medium)的屏幕你的图片像素大小为48×48，那么低密度(low)屏幕的图片大小应为36×36，高(high)的为72×72，extra-high为96×96。</p></blockquote>

<p><strong>使用9-patch PNG图片</strong></p>

<pre><code>使用图片资源时，如果出现拉伸，因为图片处理的原因，会变形，导致界面走形。9-patch PNG图片也是一种标准的PGN图片，在原生PNG图片四周空出一个像素间隔，用来标识PNG图片中哪些部分可以拉伸、哪些不可以拉伸、背景上的边框位置等。
“上、左”定义可拉伸区域 ,“右、下”定义显示区域，如果用到完整填充的背景图，建议不要通过android:padding来设置边距，而是通过9-patch方式来定义。
 Android SDK中提供了编辑9-Patch图片的工具，在tools目录下draw9patch.bat，能够立刻看到编辑后的拉伸效果，也可以直接用其他图片编辑工具编辑，但是看不到效果。
</code></pre>

<p><strong>不同的layout</strong></p>

<pre><code>    Android手机屏幕大小不一，有480x320, 640x360, 800x480……，怎样才能让Application自动适应不同的屏幕呢？
    其实很简单，只需要在res目录下创建不同的layout文件夹，比如：layout-640x360、layout-800x480……所有的layout文件在编译之后都会写入R.java里，而系统会根据屏幕的大小自己选择合适的layout进行使用。
</code></pre>

<p>  <strong>测试验证</strong></p>

<pre><code>   一般使用AVD Manager创建多个不同大小的模拟器，如果条件具备，也可以直接用真机测试，这个比较靠谱。当然，Genymotion的模拟器的飞速运行为我们提供了更好的选择，大家可以下载Genymotion的模拟器进行调试。
</code></pre>

<p>3 参考资料</p>

<ul>
<li><p><a href="http://blog.csdn.net/guozh/article/details/8954994">http://blog.csdn.net/guozh/article/details/8954994</a></p></li>
<li><p><a href="http://my.eoe.cn/cainiao1/archive/2348.html">http://my.eoe.cn/cainiao1/archive/2348.html（皇马船长）</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
